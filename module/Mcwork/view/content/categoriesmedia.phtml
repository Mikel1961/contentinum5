<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
use ContentinumComponents\Tools\HandleSerializeDatabase;

$elementSelect = function($group, $id, $rang, $total, $catName){
    $nums = (int) $total;
    $html = '<select class="changerang" data-group="' . $group . '" data-category="' . $id . '" data-rang="' . $rang . '" data-categoryname="'.$catName.'" data-move="jump">';
    for ($i = 1; $i <= $total; $i++) {
        $selected = '';
        if ($i == $rang){
            $selected = ' selected="selected"';
        }
        $html .= '<option value="'.$i.'"'.$selected.'>'.$i.'</option>';
    }
    $html .= '</select>';
    return $html;
};

$mcUnserialize = new HandleSerializeDatabase();
$src = function($entry, $mcUnserialize, $field = 'thumbnail', $ln = 'mediaLink') {
    $ret = '<figure>';
    $mediaAlternate = $mcUnserialize->execUnserialize($entry->mediaAlternate);
    if ( preg_match('/image\//', $entry->mediaType)  ){
        
        $src = $entry->mediaLink;
        if (isset($mediaAlternate[$field][$ln])) {
            $src = $mediaAlternate[$field][$ln];
        }        
        $ret .= '<img src="' . $src . '" alt="' . $entry->mediaName . '" />';
        
        
    } else {
        
        switch ($entry->mediaType){
            case 'application/pdf' :
                $ret .= '<i class="fa fa-file-pdf-o fa-5x pdf-color"></i>';
                break;
            default:
                $ret .= '<i class="fa fa-file fa-5x"></i>';
                break;
        
        }
                
    }
    $ret .= '<figcaption>' . $entry->mediaName . '</figcaption>';
    $ret .= '</figure>';
    return $ret;
};

// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
$ctrlpath = 'mediacategories';
// set table tag attributes
$tableFactory->setAttributes('class', 'table tblNoSort');// table-hover table-nomargin table-striped dataTable dataTable-tools');
$tableFactory->setAttributes('id', 'mcworkTables');
$i = 0;
$iClass = 0;//sorting_disabled
$headlines = array(
    '#' => array(),
    'Category' => array(),
    'Sequence' => array(),
    'Rang' => array(
        'head' => array(
            'class' => 'text-center'
        ),
        'body' => array(
            'class' => 'text-center'
        )    
    ),
    'Groupname' => array(
        'head' => array(
            'id' => 'thgroupname',
            'class' => 'sortyBySelect'
        ),    
    ),
    'Access' => array(),
    'Edit' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    )
)
;
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;
$defaults = $this->toolbarcontent->toArray();
$editDefaults = $defaults;
$defaults['attribute']['class'] = 'button-group left';

$rangSelect = count($this->entries);

foreach ($this->entries as $entry) {
    $i ++;
    $tbl = array(
        'up' => array(
            'attribs' => array(
                'data-group' => $entry->webMediagroupId->id,
                'data-category' => $entry->id,
                'data-rang' => $entry->itemRang,
                'data-categoryname' => 'Categories\Media',
                'data-move' => 'moveup',
                'class' => 'button tiny moveitem'
            )
        ),        
        'down' => array(
            'attribs' => array(
                'data-group' => $entry->webMediagroupId->id,
                'data-category' => $entry->id,
                'data-rang' => $entry->itemRang,
                'data-categoryname' => 'Categories\Media',
                'data-move' => 'movedown',
                'class' => 'button tiny moveitem'
            )
        ), 
    );
    if (1 == $i){
        unset($tbl['up']);
    }
    if ($i == $rangSelect){
        unset($tbl['down']);
    }
    $rowContent = array();
    $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->id . '" name="cb[]" data-name="'.$entry->webMediasId->mediaName.'" data-categoryname="Categories\Media" data-model="Remove" data-group="' . $entry->webMediagroupId->id . '">';
    $rowContent[] = $src($entry->webMediasId, $mcUnserialize); 
    $rowContent[] = $this->mcworkToolbar($tbl, true, $defaults);
    $rowContent[] = $elementSelect($entry->webMediagroupId->id,$entry->id,$entry->itemRang, $rangSelect, 'Categories\Media');
    $rowContent[] = $entry->webMediagroupId->groupName; 
    $rowContent[] = $entry->resource;

    $props = array(
        'edit' => array(
            'href' => '/mcwork/' . $ctrlpath . '/edit/' . $entry->id . '/' . $this->category,
            'attribs' => array(
                'title' => 'Edit item',
                'class' => 'button tiny'
            )
        ),
        'remove' => array(
            'href' => '/mcwork/' . $ctrlpath . '/detach',
            'attribs' => array(
                'data-name' => $entry->webMediasId->mediaName,
                'data-ident' => 'row' . $i,
                'title' => 'Remove item',
                'class' => 'button tiny alert removeitem'
            )
        ),
        'info' => array(
            'attribs' => array(
                'data-update' => $entry->upDate->format('d F Y, H:i:s'),
                'data-registerdate' => $entry->registerDate->format('d F Y, H:i:s'),
                'data-role' => $this->role,
                'title' => 'Delete item',
                'class' => 'button tiny infotip'
            )
        )        
    );    
    $rowContent[] = $this->mcworkToolbar($props, true, $editDefaults );
    
    $tableFactory->setHtmlContent($rowContent);
}
$table = $tableFactory->display();
if (true === $this->onlytable){
    echo $table;
    exit();
}
$html = '<div id="setDataTable"> '. $table . ' </div>';
$html .= $this->translate($this->mcworkContent($this->page, $this->pagecontent, 'content'));
$toolbar = '';
if (isset($this->toolbarcontent)) {
    $links = array(
        'add' => array(
            'href' => '/mcwork/' . $ctrlpath . '/add/' . $this->category
        ),
        'edit' => array(
            'href' => '/mcwork/' . $ctrlpath . '/edit',
            'attribs' => array(
                'data-category' => $this->category
            ),
        ),
        'remove' => array(
            'href' => '/mcwork/' . $ctrlpath . '/detach'
        ),
        'back' => array(
            'href' => '/mcwork/mediagroup'
        )        
    );
    $toolbar = $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
}
// output, display content
if (isset($this->widget)) {
    $content = str_replace('{TEMPLATE_HEADER}', $this->translate($this->mcworkContent($this->page, $this->pagecontent, 'subheadline')) . $toolbar, $this->widget);
    echo str_replace('{TEMPLATE_CONTENT}', $html, $content);
} else {
    echo $this->translate($this->mcworkContent($this->page, $this->pagecontent, 'subheadline'));
    echo $html;
}
?>