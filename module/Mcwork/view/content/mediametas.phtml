<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
$ctrlpath = 'mediametas';
// set table tag attributes
$tableFactory->setAttributes('class', 'table table-hover table-nomargin table-striped dataTable');
$i = 0;
$iClass = 0;
$headlines = array(
    '#' => array(),
    'Media' => array(),
    'Name' => array(),
    'Metas' => array(
        'head' => array(
            'class' => 'hide-for-small'
        ),
        'body' => array(
            'class' => 'hide-for-small'
        )
    ),
    'Last change' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    )
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$getUnserializeDatas = new ContentinumComponents\Tools\HandleSerializeDatabase();
$imagesTypes = $this->customconfig->default->Medias->images_types->toArray();
$i = 0;
foreach ($this->entries as $entry) {
    if (1 !== $entry->id){
    $i ++;
    $tableedit = '';
    if (isset($this->tableeditcontent)) {
        $links = array();
        $links = array(
            'edit' => array(
                'href' => '/mcwork/' . $ctrlpath . '/edit/' . $entry->id
            ),
            'delete' => array(
                'href' => '/mcwork/' . $ctrlpath . '/delete/' . $entry->id,
                'attribs' => array(
                    'data-name' => $entry->webMediasId->mediaName,
                    'data-ident' => 'row' . $i
                )
            )
        );
        $tableedit = $this->mcworkToolbar($links, true, $this->tableeditcontent->toArray());
    }
    $tbl = array(
        'edit' => array(
            'label' => 'Edit',
            'href' => '/mcwork/' . $ctrlpath . '/edit/' . $entry->id,
            'attribs' => array(
                'title' => 'Edit item',
                'class' => 'small button'
            )
        ),
        'delete' => array(
        		'label' => 'Delete',
        		'href' => '/mcwork/' . $ctrlpath . '/delete',
        		'attribs' => array(
        				'data-name' => $entry->webMediasId->mediaName,
        				'data-ident' => 'row' . $i,
        				'title' => 'Delete item',
        				'class' => 'small button alert deleteitem'
        		)
        )        
    );
    
    
    if ('1' == $entry->webMediasId->mediaInUse){
    	unset($tbl['delete']);
    }    
    
    $rowContent = array();
    $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->id . '" name="cb[]">';
    
    $media = 'File';
    $mediaAlternate = '';
    if (isset($imagesTypes[$entry->webMediasId->mediaType])) {
        
        if (null != ($method = $entry->webMediasId->decodeMetas)) {
            $mediaAlternate = $getUnserializeDatas->execUnserialize($entry->webMediasId->mediaAlternate, $method);
        }
        $media = 'Broken array!';
        if (is_array($mediaAlternate)) {
            if (isset($mediaAlternate['thumbnail']['mediaLink'])) {
                $media = '<img src="' . $mediaAlternate['thumbnail']['mediaLink'] . '" alt="">';
            }
        }
    } else {
        switch ($entry->webMediasId->mediaType) {
            default:
                $media = 'File';
        }
    }
    $rowContent[] = $media;
    $rowContent[] = $entry->webMediasId->mediaName . $this->mcworkTableEdit($tbl);
    $str = '';
    if (null != ($method = $entry->decodeMetas)) {
        $mediaMetas = $getUnserializeDatas->execUnserialize($entry->mediaMetas, $method);
        if (is_array($mediaMetas)) {
            $si = 1;
            foreach ($mediaMetas as $key => $value) {
                if (strlen($value) > 1) {
                    if ($si > 1) {
                        $str .= '<br />';
                    }
                    $str .= $key . '="' . $value . '"';
                    $si ++;
                }
            }
        }
    }
    $rowContent[] = $str;
    $rowContent[] = $entry->upDate->format('d F Y H:i:s');
    $tableFactory->setHtmlContent($rowContent);
    }
}
$html = $tableFactory->display();
$html .= $this->translate($this->mcworkContent($this->page, $this->pagecontent, 'content'));
$toolbar = '';
if (isset($this->toolbarcontent)) {
    $links = array(
        'edit' => array(
            'href' => '/mcwork/' . $ctrlpath . '/edit'
        )
    );
    $toolbar = $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
}
// output, display content
if (isset($this->widget)) {
    $content = str_replace('{TEMPLATE_HEADER}', $this->translate($this->mcworkContent($this->page, $this->pagecontent, 'subheadline')) . $toolbar, $this->widget);
    echo str_replace('{TEMPLATE_CONTENT}', $html, $content);
} else {
    echo $this->translate($this->mcworkContent($this->page, $this->pagecontent, 'subheadline'));
    echo $html;
}
?>